{"training_corpus":{"document_count":3,"created":"2025-06-03","documents":[{"content":"/**\n * Global Constants Configuration for Blueprint Architecture\n * \n * Central configuration for the NeuroGenServer Blueprint system.\n * All constants are frozen to prevent accidental modifications.\n * Optimized for Linux server â†’ Windows client production deployment.\n * \n * @module config/constants\n * @version 3.0.0\n */\n\n// Determine environment\nconst ENV = (() => {\n  const hostname = window.location.hostname;\n  if (hostname === 'localhost' || hostname === '127.0.0.1') {\n    return 'development';\n  }\n  if (hostname.includes('staging') || hostname.includes('test')) {\n    return 'staging';\n  }\n  return 'production';\n})();\n\n// Base configuration that other constants depend on\nconst BASE_CONFIG = {\n  ENV,\n  DEVELOPMENT: ENV === 'development',\n  STAGING: ENV === 'staging',\n  PRODUCTION: ENV === 'production',\n  DEBUG_MODE: ENV === 'development' || window.location.search.includes('debug=true'),\n  APP_VERSION: '3.0.0',\n  APP_NAME: 'NeuroGenServer',\n  BLUEPRINT_ARCHITECTURE: true\n};\n\n// API Configuration aligned with Flask Blueprint structure\nconst API_CONFIG = {\n  API_BASE_URL: '/api',\n  API_TIMEOUT: 30000, // 30 seconds\n  API_RETRY_ATTEMPTS: 3,\n  API_RETRY_DELAY: 1000, // 1 second\n  API_RETRY_BACKOFF_MULTIPLIER: 2,\n  API_MAX_RETRY_DELAY: 10000, // 10 seconds\n  API_CONCURRENT_REQUESTS: 8, // Increased for Blueprint parallel processing\n  API_RATE_LIMIT_PER_SECOND: 15,\n  \n  // Blueprint-specific timeouts\n  BLUEPRINT_TIMEOUTS: {\n    file_processor: 600000, // 10 minutes for file processing\n    playlist_downloader: 1800000, // 30 minutes for playlists\n    web_scraper: 900000, // 15 minutes for web scraping\n    academic_search: 120000, // 2 minutes for academic searches\n    pdf_processor: 300000, // 5 minutes for PDF processing\n    management: 30000 // 30 seconds for management operations\n  }\n};\n\n// Socket.IO Configuration optimized for Blueprint real-time communication\nconst SOCKET_CONFIG = {\n  SOCKET_URL: window.location.origin,\n  SOCKET_PATH: '/socket.io/',\n  SOCKET_RECONNECTION_ATTEMPTS: 15, // Increased for production stability\n  SOCKET_RECONNECTION_DELAY: 1000,\n  SOCKET_RECONNECTION_DELAY_MAX: 8000, // Increased max delay\n  SOCKET_TIMEOUT: 25000, // Increased timeout\n  SOCKET_TRANSPORTS: ['websocket', 'polling'],\n  SOCKET_UPGRADE_TIMEOUT: 15000,\n  SOCKET_PING_INTERVAL: 25000,\n  SOCKET_PING_TIMEOUT: 60000,\n  SOCKET_PROGRESS_THROTTLE_MS: 250, // Optimized for Blueprint progress updates\n  SOCKET_PROGRESS_DEDUPE_WINDOW: 100,\n  \n  // Blueprint-specific event namespaces\n  BLUEPRINT_NAMESPACES: {\n    file_processor: '/file-processor',\n    playlist_downloader: '/playlist',\n    web_scraper: '/scraper',\n    academic_search: '/academic',\n    pdf_processor: '/pdf',\n    task_management: '/tasks'\n  }\n};\n\n// Task Configuration for Blueprint task management\nconst TASK_CONFIG = {\n  TASK_TIMEOUT_DEFAULT: 600000, // 10 minutes\n  TASK_TIMEOUT_FILE_PROCESSING: 1800000, // 30 minutes\n  TASK_TIMEOUT_PLAYLIST_DOWNLOAD: 3600000, // 1 hour\n  TASK_TIMEOUT_WEB_SCRAPING: 1200000, // 20 minutes\n  TASK_TIMEOUT_ACADEMIC_SEARCH: 300000, // 5 minutes\n  TASK_TIMEOUT_PDF_PROCESSING: 900000, // 15 minutes\n  \n  TASK_PROGRESS_UPDATE_INTERVAL: 500, // 500ms for smoother updates\n  TASK_STATUS_CHECK_INTERVAL: 2000, // 2 seconds\n  TASK_MAX_RETRIES: 5, // Increased for production reliability\n  TASK_RETRY_DELAY: 3000,\n  TASK_CLEANUP_DELAY: 120000, // 2 minutes after completion\n  TASK_HISTORY_MAX_SIZE: 200, // Increased for better tracking\n  TASK_HISTORY_PERSIST: true,\n  \n  // Blueprint-specific task priorities\n  TASK_PRIORITIES: {\n    file_processor: 'high',\n    playlist_downloader: 'medium',\n    web_scraper: 'medium',\n    academic_search: 'high',  // Elevated to high priority\n    pdf_processor: 'high',\n    management: 'critical'\n  },\n\n  // Academic Search Configuration - Complete source integration\n  ACADEMIC_SEARCH: {\n    // Supported academic sources\n    SEARCH_SOURCES: ['arxiv', 'semantic_scholar', 'openalex', 'pubmed', 'ieee', 'acm'],\n    DEFAULT_SOURCE: 'all',\n    MAX_RESULTS: 100,  // Increased for production\n    DEFAULT_LIMIT: 20,\n    RESULTS_PER_PAGE: 10,\n    \n    // Search operations\n    SUPPORTED_OPERATIONS: ['search', 'details', 'download', 'citations', 'recommendations', 'multi-source'],\n    \n    // Search types\n    SEARCH_TYPES: {\n      BASIC: 'basic',\n      ADVANCED: 'advanced',\n      CITATION: 'citation',\n      AUTHOR: 'author',\n      TITLE: 'title'\n    },\n    \n    // Result filtering\n    FILTERS: {\n      DATE_RANGES: ['all', 'last_year', 'last_5_years', 'last_10_years', 'custom'],\n      PUBLICATION_TYPES: ['all', 'journal', 'conference', 'preprint', 'book', 'thesis'],\n      SORT_OPTIONS: ['relevance', 'date', 'citations', 'title', 'author']\n    },\n    \n    // Source-specific limits\n    SOURCE_LIMITS: {\n      arxiv: 50,\n      semantic_scholar: 100,\n      openalex: 200,\n      pubmed: 50,\n      ieee: 25,\n      acm: 25\n    },\n\n    // API timeouts per source (ms)\n    SOURCE_TIMEOUTS: {\n      arxiv: 30000,\n      semantic_scholar: 45000,\n      openalex: 60000,\n      pubmed: 30000,\n      ieee: 45000,\n      acm: 45000\n    }\n  }\n};\n\n// File Processing Configuration optimized for cross-platform deployment\nconst FILE_CONFIG = {\n  MAX_FILE_SIZE: 500 * 1024 * 1024, // 500MB - increased for production\n  MAX_BATCH_SIZE: 2000, // Increased batch size\n  CHUNK_SIZE: 2 * 1024 * 1024, // 2MB chunks for better performance\n  \n  // Extended file support for production\n  ALLOWED_EXTENSIONS: [\n    // Programming languages\n    '.py', '.js', '.ts', '.jsx', '.tsx', '.vue', '.java', '.c', '.cpp', '.cs', '.php',\n    '.rb', '.go', '.rs', '.swift', '.kt', '.scala', '.r', '.m', '.h', '.hpp', '.dart',\n    '.perl', '.lua', '.bash', '.powershell', '.vb', '.fs', '.clj', '.elm', '.hs',\n    \n    // Web technologies\n    '.html', '.css', '.scss', '.sass', '.less', '.styl', '.xml', '.svg',\n    \n    // Configuration and data\n    '.json', '.yaml', '.yml', '.toml', '.ini', '.cfg', '.conf', '.env', '.properties',\n    '.csv', '.tsv', '.sql', '.db', '.sqlite', '.log',\n    \n    // Documentation\n    '.md', '.txt', '.rst', '.tex', '.rtf', '.adoc',\n    \n    // Office documents\n    '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx', '.odt', '.ods', '.odp',\n    \n    // Archives\n    '.zip', '.rar', '.7z', '.tar', '.gz', '.bz2', '.xz'\n  ],\n  \n  // Cross-platform path handling\n  PATH_SEPARATORS: {\n    windows: '\\\\\\\\',\n    linux: '/',\n    normalized: '/'\n  },\n  \n  // Windows compatibility\n  WINDOWS_RESERVED_NAMES: ['CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9'],\n  WINDOWS_INVALID_CHARS: /[<>:\"|?*]/g,\n  MAX_WINDOWS_PATH_LENGTH: 260,\n  MAX_FILENAME_LENGTH: 255,\n  \n  // Default output paths for cross-platform deployment\n  DEFAULT_OUTPUT_PATHS: {\n    windows: 'C:\\\\\\\\Users\\\\\\\\{username}\\\\\\\\Documents\\\\\\\\NeuroGenServer',\n    linux: '/home/{username}/Documents/NeuroGenServer',\n    mac: '/Users/{username}/Documents/NeuroGenServer',\n    fallback: './downloads'\n  }\n};\n\n// UI Configuration optimized for Blueprint frontend\nconst UI_CONFIG = {\n  TOAST_DURATION: 6000, // Increased for better user feedback\n  TOAST_POSITION: 'top-right',\n  MODAL_ANIMATION_DURATION: 250,\n  DEBOUNCE_DELAY: 250, // Optimized for responsive UI\n  THROTTLE_DELAY: 100,\n  PROGRESS_BAR_ANIMATION_DURATION: 150,\n  PROGRESS_BAR_UPDATE_THRESHOLD: 0.5, // More sensitive updates\n  TAB_ANIMATION_DURATION: 200,\n  LOADING_SPINNER_DELAY: 150,\n  ERROR_MESSAGE_MAX_LENGTH: 750, // Increased for detailed error messages\n  THEME_TRANSITION_DURATION: 300,\n  MAX_VISIBLE_ITEMS_IN_LIST: 150, // Increased for better UX\n  AUTOSAVE_INTERVAL: 20000, // 20 seconds for better data safety\n  IDLE_TIMEOUT: 1800000, // 30 minutes\n  \n  // Blueprint-specific UI settings\n  MODULE_LOAD_TIMEOUT: 15000, // 15 seconds for module loading\n  MODULE_RETRY_ATTEMPTS: 3,\n  BLUEPRINT_TAB_ORDER: [\n    'file_processor',\n    'web_scraper', \n    'academic_search',\n    'playlist_downloader',\n    'pdf_processor',\n    'task_history'\n  ]\n};\n\n// Storage Configuration for Blueprint state management\nconst STORAGE_CONFIG = {\n  STORAGE_PREFIX: 'neurogen_v3_',\n  STORAGE_VERSION: '3.0',\n  STORAGE_QUOTA_WARNING_THRESHOLD: 0.85, // Warning at 85% usage\n  \n  SESSION_STORAGE_KEYS: [\n    'current_task',\n    'active_blueprint',\n    'active_tab',\n    'temp_form_data',\n    'progress_state',\n    'socket_state'\n  ],\n  \n  LOCAL_STORAGE_KEYS: [\n    'theme',\n    'preferences',\n    'task_history',\n    'recent_paths',\n    'api_keys',\n    'debug_mode',\n    'blueprint_settings',\n    'cross_platform_paths'\n  ],\n  \n  INDEXED_DB_NAME: 'NeuroGenServerDB',\n  INDEXED_DB_VERSION: 3,\n  INDEXED_DB_STORES: ['tasks', 'files', 'cache', 'blueprints', 'analytics']\n};\n\n// Performance Configuration for production deployment\nconst PERFORMANCE_CONFIG = {\n  ENABLE_PERFORMANCE_MONITORING: BASE_CONFIG.DEVELOPMENT || BASE_CONFIG.STAGING,\n  PERFORMANCE_SAMPLE_RATE: BASE_CONFIG.PRODUCTION ? 0.05 : 0.1, // 5% in production\n  PERFORMANCE_BUFFER_SIZE: 200,\n  LONG_TASK_THRESHOLD: 50, // milliseconds\n  MEMORY_WARNING_THRESHOLD: 200 * 1024 * 1024, // 200MB\n  MEMORY_CHECK_INTERVAL: 90000, // 1.5 minutes\n  FPS_TARGET: 60,\n  FPS_WARNING_THRESHOLD: 45, // Higher threshold for production\n  \n  // Blueprint-specific performance settings\n  MODULE_CACHE_SIZE: 50, // Cache 50 modules\n  MODULE_PRELOAD: true, // Preload critical modules\n  LAZY_LOADING: true, // Enable lazy loading for non-critical modules\n  WORKER_THREADS: navigator.hardwareConcurrency || 4\n};\n\n// Feature Flags for Blueprint modules\nconst FEATURE_FLAGS = {\n  // Core Blueprint features\n  ENABLE_FILE_PROCESSING: true,\n  ENABLE_PLAYLIST_DOWNLOADER: true,\n  ENABLE_WEB_SCRAPER: true,\n  ENABLE_ACADEMIC_SEARCH: true,\n  ENABLE_PDF_PROCESSOR: true,\n  ENABLE_TASK_HISTORY: true,\n  \n  // Cross-platform features\n  ENABLE_CROSS_PLATFORM_PATHS: true,\n  ENABLE_WINDOWS_CLIENT_SUPPORT: true,\n  ENABLE_LINUX_SERVER_OPTIMIZATION: true,\n  \n  // UI features\n  ENABLE_DARK_MODE: true,\n  ENABLE_KEYBOARD_SHORTCUTS: true,\n  ENABLE_DRAG_DROP: true,\n  ENABLE_REAL_TIME_UPDATES: true,\n  ENABLE_PROGRESS_ANIMATIONS: true,\n  \n  // Advanced features\n  ENABLE_BATCH_PROCESSING: true,\n  ENABLE_CONCURRENT_DOWNLOADS: true,\n  ENABLE_EXPORT_IMPORT: true,\n  ENABLE_ANALYTICS: BASE_CONFIG.PRODUCTION,\n  ENABLE_ERROR_REPORTING: true,\n  ENABLE_SERVICE_WORKER: BASE_CONFIG.PRODUCTION,\n  ENABLE_PWA_FEATURES: BASE_CONFIG.PRODUCTION,\n  \n  // Experimental features\n  ENABLE_WEBGL_VISUALIZATIONS: false,\n  ENABLE_VOICE_COMMANDS: false,\n  ENABLE_COLLABORATION: false,\n  ENABLE_AI_ASSISTANCE: false\n};\n\n// Validation Rules optimized for cross-platform deployment\nconst VALIDATION_CONFIG = {\n  // Path validation for different platforms\n  WINDOWS_PATH_REGEX: /^[a-zA-Z]:[\\\\\\/](?:[^<>:\"|?*]+[\\\\\\/])*[^<>:\"|?*]*$/,\n  LINUX_PATH_REGEX: /^\\/(?:[^\\/\\0]+\\/)*[^\\/\\0]*$/,\n  GENERIC_PATH_REGEX: /^[^\\0]+$/,\n  \n  // URL validation\n  URL_REGEX: /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)$/,\n  EMAIL_REGEX: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  \n  // Platform-specific validation\n  YOUTUBE_PLAYLIST_REGEX: /(?:youtube\\.com\\/(?:playlist\\?list=|watch\\?.*&list=)|youtu\\.be\\/(?:playlist\\?list=))([a-zA-Z0-9_-]+)/,\n  ARXIV_PAPER_REGEX: /arxiv\\.org\\/(?:abs|pdf)\\/([0-9]{4}\\.[0-9]{4,5})/,\n  DOI_REGEX: /10\\.\\d{4,9}\\/[-._;()\\/:A-Z0-9]+/i,\n  \n  // File validation\n  FILENAME_REGEX: /^[^<>:\"/\\\\|?*\\x00-\\x1f]+$/,\n  SAFE_FILENAME_REGEX: /^[a-zA-Z0-9._-]+$/,\n  \n  // Limits\n  MAX_PATH_LENGTH: 260, // Windows MAX_PATH\n  MAX_FILENAME_LENGTH: 255,\n  MAX_URL_LENGTH: 2048,\n  MAX_PLAYLIST_URLS: 100, // Increased for production\n  MAX_SCRAPER_URLS: 200, // Increased for production\n  MAX_CONCURRENT_TASKS: 10,\n  \n  // Cross-platform limits\n  WINDOWS_MAX_PATH: 260,\n  LINUX_MAX_PATH: 4096,\n  MAX_DRIVE_LETTERS: 26\n};\n\n// Error Messages with cross-platform context\nconst ERROR_MESSAGES = {\n  // Network errors\n  NETWORK_ERROR: 'Network connection error. Please check your internet connection and try again.',\n  TIMEOUT_ERROR: 'The operation timed out. The server may be busy, please try again in a moment.',\n  SERVER_ERROR: 'Server error occurred. Our team has been notified. Please try again later.',\n  CONNECTION_LOST: 'Connection to server lost. Attempting to reconnect...',\n  \n  // Validation errors\n  VALIDATION_ERROR: 'Please check your input and try again.',\n  INVALID_PATH: 'Invalid file path. Please enter a valid path for your operating system.',\n  INVALID_WINDOWS_PATH: 'Invalid Windows path. Please use format: C:\\\\\\\\folder\\\\\\\\file.ext',\n  INVALID_LINUX_PATH: 'Invalid Linux path. Please use format: /home/user/folder/file.ext',\n  PATH_TOO_LONG: 'File path is too long. Maximum length is {maxLength} characters.',\n  \n  // File errors\n  FILE_NOT_FOUND: 'The requested file could not be found.',\n  FILE_TOO_LARGE: 'File is too large. Maximum size is {maxSize}.',\n  INVALID_FILE_TYPE: 'Invalid file type. Please select a supported file format.',\n  PERMISSION_DENIED: 'You do not have permission to access this file or directory.',\n  \n  // Task errors\n  TASK_CANCELLED: 'Task was cancelled by user.',\n  TASK_FAILED: 'Task failed. Please check the error details and try again.',\n  TASK_TIMEOUT: 'Task timed out. The operation took too long to complete.',\n  MAX_TASKS_EXCEEDED: 'Maximum number of concurrent tasks reached. Please wait for existing tasks to complete.',\n  \n  // Storage errors\n  QUOTA_EXCEEDED: 'Storage quota exceeded. Please free up some space or clear old data.',\n  STORAGE_ERROR: 'Unable to save data. Please check your browser storage settings.',\n  \n  // Cross-platform errors\n  PLATFORM_INCOMPATIBLE: 'This feature is not compatible with your operating system.',\n  PATH_CONVERSION_ERROR: 'Unable to convert path for your operating system.',\n  WINDOWS_CLIENT_ERROR: 'Error communicating with Windows client. Please check your system configuration.',\n  \n  // Generic errors\n  SESSION_EXPIRED: 'Your session has expired. Please refresh the page.',\n  BROWSER_NOT_SUPPORTED: 'Your browser is not supported. Please use a modern browser.',\n  GENERIC_ERROR: 'An unexpected error occurred. Please try again or contact support.'\n};\n\n// Success Messages\nconst SUCCESS_MESSAGES = {\n  TASK_COMPLETED: 'Task completed successfully!',\n  FILE_UPLOADED: 'File uploaded and processing started.',\n  FILE_PROCESSED: 'File processing completed successfully!',\n  DOWNLOAD_STARTED: 'Download started. You can monitor progress below.',\n  DOWNLOAD_COMPLETED: 'All downloads completed successfully!',\n  SETTINGS_SAVED: 'Settings saved successfully!',\n  CONNECTION_RESTORED: 'Connection to server restored.',\n  TASK_STARTED: 'Task started successfully. Monitor progress below.',\n  EXPORT_COMPLETE: 'Export completed! File is ready for download.',\n  IMPORT_COMPLETE: 'Import completed successfully!',\n  PATH_VALIDATED: 'Path validated and ready for use.',\n  CROSS_PLATFORM_SUCCESS: 'Cross-platform operation completed successfully!'\n};\n\n// Keyboard Shortcuts\nconst KEYBOARD_SHORTCUTS = {\n  // Global shortcuts\n  NEW_TASK: 'Ctrl+N',\n  CANCEL_TASK: 'Escape',\n  SUBMIT_FORM: 'Ctrl+Enter',\n  TOGGLE_THEME: 'Ctrl+Shift+T',\n  TOGGLE_DEBUG: 'Ctrl+Shift+D',\n  FOCUS_SEARCH: 'Ctrl+F',\n  HELP: 'F1',\n  REFRESH: 'F5',\n  FULLSCREEN: 'F11',\n  \n  // Blueprint navigation\n  NEXT_TAB: 'Ctrl+Tab',\n  PREV_TAB: 'Ctrl+Shift+Tab',\n  FILE_PROCESSOR: 'Ctrl+1',\n  WEB_SCRAPER: 'Ctrl+2',\n  ACADEMIC_SEARCH: 'Ctrl+3',\n  PLAYLIST_DOWNLOADER: 'Ctrl+4',\n  PDF_PROCESSOR: 'Ctrl+5',\n  TASK_HISTORY: 'Ctrl+6',\n  \n  // Task management\n  START_TASK: 'Ctrl+S',\n  PAUSE_TASK: 'Ctrl+P',\n  RESUME_TASK: 'Ctrl+R',\n  CANCEL_ALL: 'Ctrl+Shift+X'\n};\n\n// Analytics Events for production monitoring\nconst ANALYTICS_EVENTS = {\n  // Application lifecycle\n  APP_LOADED: 'app_loaded',\n  BLUEPRINT_LOADED: 'blueprint_loaded',\n  MODULE_INITIALIZED: 'module_initialized',\n  \n  // Task events\n  TASK_STARTED: 'task_started',\n  TASK_COMPLETED: 'task_completed',\n  TASK_FAILED: 'task_failed',\n  TASK_CANCELLED: 'task_cancelled',\n  TASK_TIMEOUT: 'task_timeout',\n  \n  // User interactions\n  TAB_SWITCHED: 'tab_switched',\n  THEME_CHANGED: 'theme_changed',\n  FEATURE_USED: 'feature_used',\n  SHORTCUT_USED: 'shortcut_used',\n  \n  // Performance events\n  PERFORMANCE_WARNING: 'performance_warning',\n  MEMORY_WARNING: 'memory_warning',\n  SLOW_OPERATION: 'slow_operation',\n  \n  // Cross-platform events\n  CROSS_PLATFORM_OPERATION: 'cross_platform_operation',\n  WINDOWS_CLIENT_INTERACTION: 'windows_client_interaction',\n  PATH_CONVERSION: 'path_conversion',\n  \n  // Error events\n  ERROR_OCCURRED: 'error_occurred',\n  NETWORK_ERROR: 'network_error',\n  VALIDATION_ERROR: 'validation_error'\n};\n\n// Combine all configurations\nconst CONSTANTS = Object.freeze({\n  ...BASE_CONFIG,\n  ...API_CONFIG,\n  ...SOCKET_CONFIG,\n  ...TASK_CONFIG,\n  ...FILE_CONFIG,\n  ...UI_CONFIG,\n  ...STORAGE_CONFIG,\n  ...PERFORMANCE_CONFIG,\n  FEATURE_FLAGS: Object.freeze(FEATURE_FLAGS),\n  VALIDATION: Object.freeze(VALIDATION_CONFIG),\n  ERROR_MESSAGES: Object.freeze(ERROR_MESSAGES),\n  SUCCESS_MESSAGES: Object.freeze(SUCCESS_MESSAGES),\n  KEYBOARD_SHORTCUTS: Object.freeze(KEYBOARD_SHORTCUTS),\n  ANALYTICS_EVENTS: Object.freeze(ANALYTICS_EVENTS)\n});\n\n// Error Handler Configuration (v4.0 Blueprint Module)\nconst ERROR_CONFIG = {\n  MAX_ERROR_HISTORY: 50,\n  LOG_TO_CONSOLE: true,\n  SAVE_TO_LOCAL_STORAGE: true,\n  EMIT_EVENTS: true,\n  SHOW_NOTIFICATIONS: true,\n  detailedLogForTypes: ['NETWORK', 'SERVER', 'PROCESSING', 'BLUEPRINT'],\n  debug: BASE_CONFIG.DEBUG_MODE\n};\n\n// App Module Configuration (v4.0 Blueprint Module)\nconst APP_CONFIG = {\n  DEBUG: BASE_CONFIG.DEBUG_MODE,\n  DEFAULT_THEME: 'light',\n  VERSION: '4.0.0',\n  INIT_TIMEOUT: 10000,\n  MODULE_LOAD_TIMEOUT: 5000,\n  CORE_MODULES: [\n    '/static/js/modules/core/errorHandler.js',\n    '/static/js/modules/core/uiRegistry.js',\n    '/static/js/modules/core/stateManager.js',\n    '/static/js/modules/core/eventRegistry.js',\n    '/static/js/modules/core/eventManager.js',\n    '/static/js/modules/core/themeManager.js',\n    '/static/js/modules/core/healthMonitor.js'\n  ]\n};\n\n// Debug Tools Configuration (v4.0 Blueprint Module)\nconst DEBUG_CONFIG = {\n  enabled: BASE_CONFIG.DEBUG_MODE,\n  logLevel: 'debug',\n  persistLogs: false,\n  maxLogEntries: 1000,\n  enablePerformanceMonitoring: BASE_CONFIG.DEVELOPMENT,\n  enableMemoryTracking: BASE_CONFIG.DEVELOPMENT,\n  showDetailedErrors: BASE_CONFIG.DEBUG_MODE,\n  enableDiagnostics: true\n};\n\n// Export the frozen constants\nexport { CONSTANTS };\n\n// Also export individual configurations for convenience\nexport {\n  ENV,\n  BASE_CONFIG,\n  API_CONFIG,\n  SOCKET_CONFIG,\n  TASK_CONFIG,\n  FILE_CONFIG,\n  UI_CONFIG,\n  STORAGE_CONFIG,\n  PERFORMANCE_CONFIG,\n  FEATURE_FLAGS,\n  VALIDATION_CONFIG,\n  ERROR_MESSAGES,\n  SUCCESS_MESSAGES,\n  KEYBOARD_SHORTCUTS,\n  ANALYTICS_EVENTS,\n  ERROR_CONFIG,\n  APP_CONFIG,\n  DEBUG_CONFIG\n};","source":"/workspace/modules/static/js/modules/config/constants.js","title":"constants.js","language":"en"},{"content":"/**\n * API Endpoints Configuration for Blueprint Architecture\n * \n * Central location for all API endpoint definitions aligned with Flask Blueprint structure.\n * Based on analysis of current Blueprint routes and production requirements.\n * \n * @module config/endpoints\n * @version 3.0.0\n */\n\n/**\n * API endpoint definitions organized by Blueprint feature\n */\nexport const API_ENDPOINTS = Object.freeze({\n  // File Processing Endpoints (features/file_processor.py)\n  FILE_PROCESSING: {\n    PROCESS: '/api/process',\n    STATUS: '/api/status/:taskId',\n    DOWNLOAD: '/api/download/:taskId',\n    OPEN: '/api/open/:taskId',\n    DETECT_PATH: '/api/detect-path',\n    VERIFY_PATH: '/api/verify-path',\n    CREATE_DIRECTORY: '/api/create-directory',\n    OPEN_FILE: '/api/open-file',\n    GET_OUTPUT_FILEPATH: '/api/get-output-filepath'\n  },\n\n  // Playlist Processing Endpoints (features/playlist_downloader.py)\n  PLAYLIST: {\n    START: '/api/start-playlists',\n    CANCEL: '/api/cancel-playlists/:taskId',\n    STATUS: '/api/status/:taskId',\n    HEALTH: '/api/health'\n  },\n\n  // Web Scraping Endpoints (features/web_scraper.py)\n  WEB_SCRAPER: {\n    SCRAPE: '/api/scrape2',\n    STATUS: '/api/scrape2/status/:taskId',\n    CANCEL: '/api/scrape2/cancel/:taskId',\n    HEALTH: '/api/health-enhanced',\n    DOWNLOAD_PDF: '/api/download-pdf',\n    DOWNLOAD_FILE: '/api/download-file/:filePath'\n  },\n\n  // Academic Search Endpoints (features/academic_search.py) - Complete integration\n  ACADEMIC: {\n    SEARCH: '/api/academic/search',\n    MULTI_SOURCE: '/api/academic/multi-source',\n    DETAILS: '/api/academic/details/:id',\n    DOWNLOAD: '/api/academic/download/:id',\n    DOWNLOAD_PDF: '/api/academic/download-pdf',\n    CITATIONS: '/api/academic/citations/:id',\n    RECOMMENDATIONS: '/api/academic/recommendations/:id',\n    HEALTH: '/api/academic/health',\n    STATUS: '/api/academic/status/:taskId',\n    CANCEL: '/api/academic/cancel/:taskId'\n  },\n\n  // PDF Processing Endpoints (features/pdf_processor.py)\n  PDF_PROCESSOR: {\n    PROCESS: '/api/pdf-process/process',\n    STATUS: '/api/pdf-process/status/:taskId',\n    EXTRACT: '/api/pdf-process/extract',\n    CAPABILITIES: '/api/pdf-process/capabilities',\n    ANALYZE: '/api/pdf-process/analyze'\n  },\n\n  // PDF Downloader Endpoints (features/pdf_downloader.py)\n  PDF_DOWNLOADER: {\n    DOWNLOAD: '/api/pdf/download',\n    BATCH_DOWNLOAD: '/api/pdf/batch-download',\n    STATUS: '/api/pdf/status/:taskId',\n    CANCEL: '/api/pdf/cancel/:taskId',\n    HEALTH: '/api/pdf/health'\n  },\n\n  // Task Management Endpoints (api/management.py + task_api_routes.py)\n  TASK: {\n    LIST: '/api/tasks',\n    CANCEL: '/api/cancel/:taskId',\n    ANALYTICS: '/api/analytics',\n    EXPORT: '/api/export/:taskId',\n    PROGRESS: '/api/progress/:taskId',\n    STATUS: '/api/status/:taskId',\n    TASK_STATUS: '/api/task/:taskId/status',\n    TASK_STATUS_ALT: '/api/task_status/:taskId',\n    CREATE: '/api/task/create',\n    UPDATE: '/api/task/:taskId/update',\n    COMPLETE: '/api/task/:taskId/complete',\n    FAIL: '/api/task/:taskId/fail',\n    HISTORY: '/api/history'\n  },\n\n  // API Key Management (api/management.py)\n  API_KEYS: {\n    LIST: '/api/keys',\n    CREATE: '/api/keys/create',\n    REVOKE: '/api/keys/revoke'\n  },\n\n  // System Endpoints (core/routes.py)\n  SYSTEM: {\n    HOME: '/',\n    HEALTH: '/health',\n    DIAGNOSTICS: '/diagnostics',\n    TEST_MODULES: '/test-modules',\n    VERSION: '/api/version'\n  },\n\n  // Download Endpoints (general)\n  DOWNLOAD: {\n    FILE: '/download/:filename',\n    TEMP: '/api/download/temp/:fileId'\n  }\n});\n\n/**\n * Blueprint-specific endpoint validation based on actual route implementations\n */\nexport const BLUEPRINT_ROUTES = Object.freeze({\n  // File Processor Blueprint\n  file_processor: {\n    endpoints: API_ENDPOINTS.FILE_PROCESSING,\n    blueprint_name: 'file_processor',\n    url_prefix: '/api',\n    methods: {\n      '/api/process': ['POST', 'HEAD'],\n      '/api/status/:taskId': ['GET'],\n      '/api/progress/:taskId': ['GET'],\n      '/api/task/:taskId/status': ['GET'],\n      '/api/task_status/:taskId': ['GET'],\n      '/api/download/:taskId': ['GET'],\n      '/api/open/:taskId': ['GET'],\n      '/api/detect-path': ['POST'],\n      '/api/verify-path': ['POST'],\n      '/api/create-directory': ['POST'],\n      '/api/open-file': ['POST']\n    }\n  },\n\n  // Playlist Downloader Blueprint\n  playlist_downloader: {\n    endpoints: API_ENDPOINTS.PLAYLIST,\n    blueprint_name: 'playlist_downloader',\n    url_prefix: '/api',\n    methods: {\n      '/api/start-playlists': ['POST', 'HEAD'],\n      '/api/cancel-playlists/:taskId': ['POST']\n    }\n  },\n\n  // Web Scraper Blueprint\n  web_scraper: {\n    endpoints: API_ENDPOINTS.WEB_SCRAPER,\n    blueprint_name: 'web_scraper',\n    url_prefix: '/api',\n    methods: {\n      '/api/scrape2': ['POST', 'HEAD'],\n      '/api/scrape2/status/:taskId': ['GET'],\n      '/api/scrape2/cancel/:taskId': ['POST'],\n      '/api/health-enhanced': ['GET'],\n      '/api/download-pdf': ['POST'],\n      '/api/download-file/:filePath': ['GET']\n    }\n  },\n\n  // Academic Search Blueprint\n  academic_search: {\n    endpoints: API_ENDPOINTS.ACADEMIC,\n    blueprint_name: 'academic_search',\n    url_prefix: '/api',\n    methods: {\n      '/api/academic/search': ['POST'],\n      '/api/academic/health': ['GET'],\n      '/api/academic/download': ['POST']\n    }\n  },\n\n  // PDF Processor Blueprint\n  pdf_processor: {\n    endpoints: API_ENDPOINTS.PDF_PROCESSOR,\n    blueprint_name: 'pdf_processor',\n    url_prefix: '/api/pdf-process',\n    methods: {\n      '/api/pdf-process/process': ['POST'],\n      '/api/pdf-process/status/:taskId': ['GET'],\n      '/api/pdf-process/extract': ['POST'],\n      '/api/pdf-process/capabilities': ['GET'],\n      '/api/pdf-process/analyze': ['POST']\n    }\n  },\n\n  // PDF Downloader Blueprint\n  pdf_downloader: {\n    endpoints: API_ENDPOINTS.PDF_DOWNLOADER,\n    blueprint_name: 'pdf_downloader',\n    url_prefix: '/api/pdf',\n    methods: {\n      '/api/pdf/download': ['POST'],\n      '/api/pdf/batch-download': ['POST'],\n      '/api/pdf/status/:taskId': ['GET'],\n      '/api/pdf/cancel/:taskId': ['POST'],\n      '/api/pdf/health': ['GET']\n    }\n  },\n\n  // Management Blueprint\n  management: {\n    endpoints: { ...API_ENDPOINTS.TASK, ...API_ENDPOINTS.API_KEYS },\n    blueprint_name: 'api_management',\n    url_prefix: '/api',\n    methods: {\n      '/api/tasks': ['GET'],\n      '/api/cancel/:taskId': ['POST'],\n      '/api/analytics': ['GET'],\n      '/api/keys': ['GET'],\n      '/api/keys/create': ['POST'],\n      '/api/keys/revoke': ['POST']\n    }\n  },\n\n  // Core Routes Blueprint\n  core: {\n    endpoints: API_ENDPOINTS.SYSTEM,\n    blueprint_name: 'core',\n    url_prefix: '',\n    methods: {\n      '/': ['GET'],\n      '/health': ['GET'],\n      '/diagnostics': ['GET'],\n      '/test-modules': ['GET']\n    }\n  }\n});\n\n/**\n * Cross-platform path handling for Linux server â†’ Windows client downloads\n */\nexport const PATH_CONFIG = Object.freeze({\n  // Windows path conversion patterns\n  WINDOWS_DRIVE_PATTERN: /^[A-Za-z]:/,\n  WINDOWS_PATH_SEPARATOR: '\\\\\\\\',\n  LINUX_PATH_SEPARATOR: '/',\n  \n  // Default output paths by platform\n  DEFAULT_WINDOWS_PATH: 'C:\\\\\\\\Users\\\\\\\\{username}\\\\\\\\Documents\\\\\\\\NeuroGen',\n  DEFAULT_LINUX_PATH: '/home/{username}/Documents/NeuroGen',\n  DEFAULT_MAC_PATH: '/Users/{username}/Documents/NeuroGen',\n  \n  // File naming patterns for cross-platform compatibility\n  SAFE_FILENAME_REGEX: /[<>:\"|?*]/g,\n  MAX_FILENAME_LENGTH: 255,\n  RESERVED_WINDOWS_NAMES: ['CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9']\n});\n\n/**\n * Helper function to build endpoint URL with parameters\n * @param {string} endpoint - Endpoint template\n * @param {Object} params - Parameters to replace\n * @returns {string} Built endpoint URL\n */\nexport function buildEndpoint(endpoint, params = {}) {\n  let url = endpoint;\n  \n  // Replace path parameters\n  Object.entries(params).forEach(([key, value]) => {\n    url = url.replace(`:${key}`, encodeURIComponent(value));\n  });\n  \n  return url;\n}\n\n/**\n * Helper function to build URL with query parameters\n * @param {string} endpoint - Base endpoint\n * @param {Object} queryParams - Query parameters\n * @returns {string} URL with query string\n */\nexport function buildUrlWithQuery(endpoint, queryParams = {}) {\n  const params = new URLSearchParams();\n  \n  Object.entries(queryParams).forEach(([key, value]) => {\n    if (value !== null && value !== undefined) {\n      params.append(key, value);\n    }\n  });\n  \n  const queryString = params.toString();\n  return queryString ? `${endpoint}?${queryString}` : endpoint;\n}\n\n/**\n * Get all endpoints for a specific Blueprint\n * @param {string} blueprint - Blueprint name\n * @returns {Object} Blueprint endpoints\n */\nexport function getBlueprintEndpoints(blueprint) {\n  return BLUEPRINT_ROUTES[blueprint]?.endpoints || {};\n}\n\n/**\n * Get HTTP methods for a specific endpoint\n * @param {string} endpoint - Endpoint path\n * @returns {Array} HTTP methods\n */\nexport function getEndpointMethods(endpoint) {\n  for (const blueprint of Object.values(BLUEPRINT_ROUTES)) {\n    if (blueprint.methods[endpoint]) {\n      return blueprint.methods[endpoint];\n    }\n  }\n  \n  // Fallback to smart detection\n  if (endpoint.includes('/status/') || endpoint.includes('/health') || endpoint.includes('/download/')) {\n    return ['GET'];\n  }\n  \n  if (endpoint.includes('/cancel/') || endpoint.includes('/revoke')) {\n    return ['POST']; // Some cancellations use POST instead of DELETE\n  }\n  \n  return ['POST']; // Default for most processing endpoints\n}\n\n/**\n * Check if an endpoint requires authentication\n * @param {string} endpoint - Endpoint path\n * @returns {boolean} Requires authentication\n */\nexport function requiresAuth(endpoint) {\n  const authRequired = [\n    '/api/analytics',\n    '/api/keys',\n    '/api/tasks'\n  ];\n  \n  return authRequired.some(path => endpoint.startsWith(path));\n}\n\n/**\n * Check if an endpoint supports file upload\n * @param {string} endpoint - Endpoint path\n * @returns {boolean} Supports file upload\n */\nexport function supportsFileUpload(endpoint) {\n  const uploadEndpoints = [\n    API_ENDPOINTS.FILE_PROCESSING.PROCESS,\n    API_ENDPOINTS.PDF.PROCESS,\n    API_ENDPOINTS.PDF.EXTRACT\n  ];\n  \n  return uploadEndpoints.includes(endpoint);\n}\n\n/**\n * Get timeout for specific endpoint based on expected processing time\n * @param {string} endpoint - Endpoint path\n * @returns {number} Timeout in milliseconds\n */\nexport function getEndpointTimeout(endpoint) {\n  // Long timeouts for processing endpoints\n  if (endpoint.includes('/process') || endpoint.includes('/start-playlists') || endpoint.includes('/scrape')) {\n    return 300000; // 5 minutes\n  }\n  \n  if (endpoint.includes('/download/')) {\n    return 120000; // 2 minutes\n  }\n  \n  if (endpoint.includes('/status/')) {\n    return 10000; // 10 seconds\n  }\n  \n  // Default timeout\n  return 30000; // 30 seconds\n}\n\n/**\n * Validate endpoint exists in Blueprint routes\n * @param {string} endpoint - Endpoint path\n * @returns {Object} Validation result\n */\nexport function validateEndpoint(endpoint) {\n  for (const [blueprintName, blueprint] of Object.entries(BLUEPRINT_ROUTES)) {\n    const methods = blueprint.methods;\n    \n    // Check exact match\n    if (methods[endpoint]) {\n      return {\n        valid: true,\n        blueprint: blueprintName,\n        methods: methods[endpoint],\n        endpoint: endpoint\n      };\n    }\n    \n    // Check pattern match (for :taskId parameters)\n    for (const [pattern, methodList] of Object.entries(methods)) {\n      const regex = new RegExp('^' + pattern.replace(/:taskId/g, '[^/]+') + '$');\n      if (regex.test(endpoint)) {\n        return {\n          valid: true,\n          blueprint: blueprintName,\n          methods: methodList,\n          pattern: pattern,\n          endpoint: endpoint\n        };\n      }\n    }\n  }\n  \n  return {\n    valid: false,\n    endpoint: endpoint,\n    error: 'Endpoint not found in any Blueprint'\n  };\n}\n\n/**\n * Convert Windows path to cross-platform format for Linux server\n * @param {string} windowsPath - Windows-style path\n * @returns {string} Sanitized path for Linux server\n */\nexport function sanitizePathForLinuxServer(windowsPath) {\n  if (!windowsPath) return '';\n  \n  // Replace Windows path separators\n  let sanitized = windowsPath.replace(/\\\\/g, '/');\n  \n  // Handle drive letters (C: becomes /mnt/c or similar)\n  sanitized = sanitized.replace(/^([A-Za-z]):/, '/mnt/$1');\n  \n  // Remove invalid characters for Linux\n  sanitized = sanitized.replace(/[<>:\"|?*]/g, '_');\n  \n  return sanitized;\n}\n\n/**\n * Generate Windows-compatible filename from Linux server\n * @param {string} filename - Original filename\n * @returns {string} Windows-compatible filename\n */\nexport function sanitizeFilenameForWindows(filename) {\n  if (!filename) return '';\n  \n  // Replace invalid Windows characters\n  let sanitized = filename.replace(PATH_CONFIG.SAFE_FILENAME_REGEX, '_');\n  \n  // Check for reserved Windows names\n  const baseName = sanitized.split('.')[0].toUpperCase();\n  if (PATH_CONFIG.RESERVED_WINDOWS_NAMES.includes(baseName)) {\n    sanitized = `${sanitized}_file`;\n  }\n  \n  // Trim to max length\n  if (sanitized.length > PATH_CONFIG.MAX_FILENAME_LENGTH) {\n    const ext = sanitized.substring(sanitized.lastIndexOf('.'));\n    const name = sanitized.substring(0, PATH_CONFIG.MAX_FILENAME_LENGTH - ext.length);\n    sanitized = name + ext;\n  }\n  \n  return sanitized;\n}\n\n/**\n * Export individual endpoint groups for convenience\n */\nexport const FILE_ENDPOINTS = API_ENDPOINTS.FILE_PROCESSING;\nexport const PLAYLIST_ENDPOINTS = API_ENDPOINTS.PLAYLIST;\nexport const SCRAPER_ENDPOINTS = API_ENDPOINTS.WEB_SCRAPER;\nexport const PDF_ENDPOINTS = API_ENDPOINTS.PDF;\nexport const TASK_ENDPOINTS = API_ENDPOINTS.TASK;\nexport const ACADEMIC_ENDPOINTS = API_ENDPOINTS.ACADEMIC;\nexport const SYSTEM_ENDPOINTS = API_ENDPOINTS.SYSTEM;\n\n// Legacy compatibility exports for existing code\nexport const ENDPOINTS = {\n  // File processing\n  PROCESS: API_ENDPOINTS.FILE_PROCESSING.PROCESS,\n  STATUS: API_ENDPOINTS.FILE_PROCESSING.STATUS,\n  DOWNLOAD: API_ENDPOINTS.FILE_PROCESSING.DOWNLOAD,\n  \n  // Playlist\n  START_PLAYLISTS: API_ENDPOINTS.PLAYLIST.START,\n  CANCEL_PLAYLISTS: API_ENDPOINTS.PLAYLIST.CANCEL,\n  \n  // Web scraper\n  SCRAPE: API_ENDPOINTS.WEB_SCRAPER.SCRAPE,\n  SCRAPE_STATUS: API_ENDPOINTS.WEB_SCRAPER.STATUS,\n  SCRAPE_CANCEL: API_ENDPOINTS.WEB_SCRAPER.CANCEL,\n  SCRAPE_HEALTH: API_ENDPOINTS.WEB_SCRAPER.HEALTH,\n  SCRAPE_DOWNLOAD_PDF: API_ENDPOINTS.WEB_SCRAPER.DOWNLOAD_PDF,\n  \n  // Academic\n  ACADEMIC_SEARCH: API_ENDPOINTS.ACADEMIC.SEARCH,\n  ACADEMIC_HEALTH: API_ENDPOINTS.ACADEMIC.HEALTH,\n  \n  // System\n  HOME: API_ENDPOINTS.SYSTEM.HOME,\n  HEALTH: API_ENDPOINTS.SYSTEM.HEALTH\n};\n\n// Note: buildUrlWithQuery is already exported as a named export above","source":"/workspace/modules/static/js/modules/config/endpoints.js","title":"endpoints.js","language":"en"},{"content":"/**\n * Socket.IO Events Configuration for Blueprint Architecture\n * \n * Central location for all Socket.IO event names and payloads aligned with\n * Flask Blueprint real-time communication patterns.\n * \n * @module config/socketEvents\n * @version 3.0.0\n */\n\n/**\n * Socket.IO event names organized by Blueprint and direction\n */\nexport const SOCKET_EVENTS = Object.freeze({\n  // Connection Events\n  CONNECTION: {\n    CONNECT: 'connect',\n    DISCONNECT: 'disconnect',\n    CONNECT_ERROR: 'connect_error',\n    RECONNECT: 'reconnect',\n    RECONNECT_ATTEMPT: 'reconnect_attempt',\n    RECONNECT_ERROR: 'reconnect_error',\n    RECONNECT_FAILED: 'reconnect_failed',\n    CONNECTION_ESTABLISHED: 'connection_established'\n  },\n\n  // Client -> Server Events\n  CLIENT_TO_SERVER: {\n    // General communication\n    PING: 'ping',\n    REQUEST_TASK_STATUS: 'request_task_status',\n    CANCEL_TASK: 'cancel_task',\n    PAUSE_TASK: 'pause_task',\n    RESUME_TASK: 'resume_task',\n    \n    // File Processing Blueprint events\n    FILE_PROCESS_REQUEST: 'file_process_request',\n    \n    // Playlist Downloader Blueprint events\n    PLAYLIST_DOWNLOAD_REQUEST: 'playlist_download_request',\n    \n    // Web Scraper Blueprint events\n    SCRAPE_REQUEST: 'scrape_request',\n    \n    // Academic Search Blueprint events\n    ACADEMIC_SEARCH_REQUEST: 'academic_search_request',\n    \n    // PDF Processor Blueprint events\n    PDF_PROCESSING_REQUEST: 'pdf_processing_request',\n    \n    // System events\n    GET_SYSTEM_STATUS: 'get_system_status',\n    GET_BLUEPRINT_STATUS: 'get_blueprint_status'\n  },\n\n  // Server -> Client Events (from Blueprint backends)\n  SERVER_TO_CLIENT: {\n    // General server events\n    PONG: 'pong',\n    SERVER_ERROR: 'server_error',\n    BLUEPRINT_ERROR: 'blueprint_error',\n    \n    // Task Lifecycle Events (Blueprint agnostic)\n    TASK_QUEUED: 'task_queued',\n    TASK_STARTED: 'task_started',\n    PROGRESS_UPDATE: 'progress_update', // Main progress event\n    TASK_COMPLETED: 'task_completed',\n    TASK_ERROR: 'task_error', // Main error event\n    TASK_CANCELLED: 'task_cancelled',\n    TASK_PAUSED: 'task_paused',\n    TASK_RESUMED: 'task_resumed',\n    \n    // File Processing Blueprint Events\n    FILE_FOUND: 'file_found',\n    FILE_PROCESSED: 'file_processed',\n    FILE_SKIPPED: 'file_skipped',\n    FILE_ERROR: 'file_error',\n    FILE_PROCESSING_STAGE: 'file_processing_stage',\n    \n    // Playlist Downloader Blueprint Events\n    PLAYLIST_METADATA_FETCHED: 'playlist_metadata_fetched',\n    PLAYLIST_VIDEO_FOUND: 'playlist_video_found',\n    PLAYLIST_VIDEO_STARTED: 'video_started',\n    PLAYLIST_VIDEO_PROGRESS: 'video_progress',\n    PLAYLIST_VIDEO_COMPLETED: 'video_completed',\n    PLAYLIST_VIDEO_ERROR: 'playlist_video_error',\n    PLAYLIST_STAGE_PROGRESS: 'playlist_stage_progress',\n    PLAYLIST_STARTED: 'playlist_started',\n    PLAYLIST_COMPLETED: 'playlist_completed',\n    PLAYLIST_ERROR: 'playlist_error',\n    \n    // Web Scraper Blueprint Events\n    URL_SCRAPED: 'url_scraped',\n    PDF_FOUND: 'pdf_found',\n    PDF_DOWNLOAD_START: 'pdf_download_start',\n    PDF_DOWNLOAD_PROGRESS: 'pdf_download_progress',\n    PDF_DOWNLOAD_COMPLETE: 'pdf_download_complete',\n    PDF_DOWNLOAD_ERROR: 'pdf_download_error',\n    SCRAPER_STAGE_PROGRESS: 'scraper_stage_progress',\n    \n    // Academic Search Blueprint Events\n    ACADEMIC_SEARCH_STARTED: 'academic_search_started',\n    ACADEMIC_PAPER_FOUND: 'academic_paper_found',\n    ACADEMIC_SEARCH_PROGRESS: 'academic_search_progress',\n    ACADEMIC_SEARCH_COMPLETED: 'academic_search_completed',\n    ACADEMIC_SEARCH_ERROR: 'academic_search_error',\n    \n    // PDF Processor Blueprint Events\n    PDF_PROCESSING_STARTED: 'pdf_processing_started',\n    PDF_PROCESSING_PROGRESS: 'pdf_processing_progress',\n    PDF_TABLE_EXTRACTED: 'pdf_table_extracted',\n    PDF_TEXT_EXTRACTED: 'pdf_text_extracted',\n    PDF_PROCESSING_COMPLETED: 'pdf_processing_completed',\n    PDF_PROCESSING_ERROR: 'pdf_processing_error',\n    \n    // System Events\n    SYSTEM_STATUS: 'system_status',\n    BLUEPRINT_STATUS: 'blueprint_status',\n    MEMORY_WARNING: 'memory_warning',\n    RATE_LIMIT_WARNING: 'rate_limit_warning',\n    CROSS_PLATFORM_STATUS: 'cross_platform_status'\n  }\n});\n\n/**\n * Blueprint-specific event mappings for easy access\n */\nexport const BLUEPRINT_EVENTS = Object.freeze({\n  file_processor: {\n    // Events specific to file processing Blueprint\n    progress: SOCKET_EVENTS.SERVER_TO_CLIENT.PROGRESS_UPDATE,\n    started: SOCKET_EVENTS.SERVER_TO_CLIENT.TASK_STARTED,\n    completed: SOCKET_EVENTS.SERVER_TO_CLIENT.TASK_COMPLETED,\n    error: SOCKET_EVENTS.SERVER_TO_CLIENT.TASK_ERROR,\n    file_found: SOCKET_EVENTS.SERVER_TO_CLIENT.FILE_FOUND,\n    file_processed: SOCKET_EVENTS.SERVER_TO_CLIENT.FILE_PROCESSED,\n    file_error: SOCKET_EVENTS.SERVER_TO_CLIENT.FILE_ERROR\n  },\n  \n  playlist_downloader: {\n    // Events specific to playlist downloader Blueprint\n    progress: SOCKET_EVENTS.SERVER_TO_CLIENT.PROGRESS_UPDATE,\n    started: SOCKET_EVENTS.SERVER_TO_CLIENT.PLAYLIST_STARTED,\n    completed: SOCKET_EVENTS.SERVER_TO_CLIENT.PLAYLIST_COMPLETED,\n    error: SOCKET_EVENTS.SERVER_TO_CLIENT.PLAYLIST_ERROR,\n    video_started: SOCKET_EVENTS.SERVER_TO_CLIENT.PLAYLIST_VIDEO_STARTED,\n    video_progress: SOCKET_EVENTS.SERVER_TO_CLIENT.PLAYLIST_VIDEO_PROGRESS,\n    video_completed: SOCKET_EVENTS.SERVER_TO_CLIENT.PLAYLIST_VIDEO_COMPLETED,\n    stage_progress: SOCKET_EVENTS.SERVER_TO_CLIENT.PLAYLIST_STAGE_PROGRESS\n  },\n  \n  web_scraper: {\n    // Events specific to web scraper Blueprint\n    progress: SOCKET_EVENTS.SERVER_TO_CLIENT.PROGRESS_UPDATE,\n    started: SOCKET_EVENTS.SERVER_TO_CLIENT.TASK_STARTED,\n    completed: SOCKET_EVENTS.SERVER_TO_CLIENT.TASK_COMPLETED,\n    error: SOCKET_EVENTS.SERVER_TO_CLIENT.TASK_ERROR,\n    url_scraped: SOCKET_EVENTS.SERVER_TO_CLIENT.URL_SCRAPED,\n    pdf_found: SOCKET_EVENTS.SERVER_TO_CLIENT.PDF_FOUND,\n    pdf_download_start: SOCKET_EVENTS.SERVER_TO_CLIENT.PDF_DOWNLOAD_START,\n    pdf_download_progress: SOCKET_EVENTS.SERVER_TO_CLIENT.PDF_DOWNLOAD_PROGRESS,\n    pdf_download_complete: SOCKET_EVENTS.SERVER_TO_CLIENT.PDF_DOWNLOAD_COMPLETE\n  },\n  \n  academic_search: {\n    // Events specific to academic search Blueprint\n    progress: SOCKET_EVENTS.SERVER_TO_CLIENT.ACADEMIC_SEARCH_PROGRESS,\n    started: SOCKET_EVENTS.SERVER_TO_CLIENT.ACADEMIC_SEARCH_STARTED,\n    completed: SOCKET_EVENTS.SERVER_TO_CLIENT.ACADEMIC_SEARCH_COMPLETED,\n    error: SOCKET_EVENTS.SERVER_TO_CLIENT.ACADEMIC_SEARCH_ERROR,\n    paper_found: SOCKET_EVENTS.SERVER_TO_CLIENT.ACADEMIC_PAPER_FOUND\n  },\n  \n  pdf_processor: {\n    // Events specific to PDF processor Blueprint\n    progress: SOCKET_EVENTS.SERVER_TO_CLIENT.PDF_PROCESSING_PROGRESS,\n    started: SOCKET_EVENTS.SERVER_TO_CLIENT.PDF_PROCESSING_STARTED,\n    completed: SOCKET_EVENTS.SERVER_TO_CLIENT.PDF_PROCESSING_COMPLETED,\n    error: SOCKET_EVENTS.SERVER_TO_CLIENT.PDF_PROCESSING_ERROR,\n    table_extracted: SOCKET_EVENTS.SERVER_TO_CLIENT.PDF_TABLE_EXTRACTED,\n    text_extracted: SOCKET_EVENTS.SERVER_TO_CLIENT.PDF_TEXT_EXTRACTED\n  }\n});\n\n/**\n * Event payload schemas for Blueprint communication\n */\nexport const EVENT_PAYLOADS = Object.freeze({\n  // Client -> Server Payloads\n  PING: {\n    timestamp: 'number'\n  },\n  \n  REQUEST_TASK_STATUS: {\n    task_id: 'string',\n    blueprint: 'string?'\n  },\n  \n  CANCEL_TASK: {\n    task_id: 'string',\n    blueprint: 'string?',\n    reason: 'string?'\n  },\n  \n  FILE_PROCESS_REQUEST: {\n    input_dir: 'string',\n    output_file: 'string',\n    options: 'object?'\n  },\n  \n  PLAYLIST_DOWNLOAD_REQUEST: {\n    playlists: 'array',\n    root_directory: 'string',\n    output_file: 'string',\n    options: 'object?'\n  },\n  \n  SCRAPE_REQUEST: {\n    urls: 'array',\n    output_file: 'string',\n    download_pdfs: 'boolean?',\n    max_pdfs: 'number?',\n    recursive: 'boolean?',\n    max_depth: 'number?'\n  },\n  \n  ACADEMIC_SEARCH_REQUEST: {\n    query: 'string',\n    sources: 'array?',\n    max_results: 'number?',\n    download_pdfs: 'boolean?'\n  },\n  \n  PDF_PROCESSING_REQUEST: {\n    file_path: 'string',\n    extract_tables: 'boolean?',\n    extract_text: 'boolean?',\n    ocr_enabled: 'boolean?'\n  },\n  \n  // Server -> Client Payloads\n  TASK_STARTED: {\n    task_id: 'string',\n    task_type: 'string',\n    blueprint: 'string',\n    status: 'string',\n    message: 'string',\n    timestamp: 'number',\n    estimated_duration: 'number?'\n  },\n  \n  PROGRESS_UPDATE: {\n    task_id: 'string',\n    task_type: 'string',\n    blueprint: 'string',\n    progress: 'number', // 0-100\n    status: 'string',\n    message: 'string',\n    stats: 'object',\n    timestamp: 'number',\n    details: 'object?',\n    stage: 'string?',\n    estimated_remaining: 'number?'\n  },\n  \n  TASK_COMPLETED: {\n    task_id: 'string',\n    task_type: 'string',\n    blueprint: 'string',\n    status: 'string',\n    message: 'string',\n    progress: 'number', // Should be 100\n    stats: 'object',\n    output_file: 'string?',\n    output_files: 'array?', // For multiple files\n    duration_seconds: 'number',\n    timestamp: 'number',\n    success_count: 'number?',\n    error_count: 'number?'\n  },\n  \n  TASK_ERROR: {\n    task_id: 'string',\n    task_type: 'string',\n    blueprint: 'string',\n    status: 'string',\n    error: 'string',\n    error_code: 'string?',\n    error_details: 'object?',\n    stats: 'object',\n    progress: 'number',\n    timestamp: 'number',\n    retry_possible: 'boolean?',\n    suggested_action: 'string?'\n  },\n  \n  // Blueprint-specific payloads\n  FILE_PROCESSED: {\n    task_id: 'string',\n    file_path: 'string',\n    file_size: 'number',\n    processing_time: 'number',\n    chunks_created: 'number?',\n    timestamp: 'number'\n  },\n  \n  PLAYLIST_VIDEO_PROGRESS: {\n    task_id: 'string',\n    video_url: 'string',\n    video_title: 'string',\n    progress: 'number',\n    downloaded_bytes: 'number',\n    total_bytes: 'number',\n    speed_bps: 'number?',\n    eta_seconds: 'number?'\n  },\n  \n  PDF_DOWNLOAD_PROGRESS: {\n    task_id: 'string',\n    pdf_url: 'string',\n    pdf_title: 'string?',\n    progress: 'number',\n    downloaded_bytes: 'number',\n    total_bytes: 'number',\n    speed_bps: 'number?'\n  },\n  \n  ACADEMIC_PAPER_FOUND: {\n    task_id: 'string',\n    paper_id: 'string',\n    title: 'string',\n    authors: 'array',\n    source: 'string',\n    doi: 'string?',\n    arxiv_id: 'string?',\n    pdf_url: 'string?'\n  },\n  \n  CROSS_PLATFORM_STATUS: {\n    server_platform: 'string', // 'linux', 'windows', 'mac'\n    client_platform: 'string',\n    path_conversion_active: 'boolean',\n    windows_client_support: 'boolean'\n  }\n});\n\n/**\n * Helper to create event payload with validation\n * @param {string} eventType - Event type\n * @param {Object} data - Event data\n * @returns {Object} Validated payload\n */\nexport function createEventPayload(eventType, data) {\n  const schema = EVENT_PAYLOADS[eventType];\n  if (!schema) {\n    console.warn(`No schema defined for event type: ${eventType}`);\n    return data;\n  }\n  \n  const payload = {};\n  Object.keys(schema).forEach(key => {\n    const type = schema[key];\n    const isOptional = type.endsWith('?');\n    const actualType = isOptional ? type.slice(0, -1) : type;\n    \n    if (data[key] === undefined && !isOptional) {\n      console.warn(`Missing required field '${key}' for event ${eventType}`);\n    }\n    \n    if (data[key] !== undefined) {\n      const valueType = Array.isArray(data[key]) ? 'array' : typeof data[key];\n      if (valueType !== actualType && actualType !== 'object') {\n        console.warn(`Type mismatch for field '${key}' in event ${eventType}: expected ${actualType}, got ${valueType}`);\n      }\n      payload[key] = data[key];\n    }\n  });\n  \n  return payload;\n}\n\n/**\n * Get all events for a specific Blueprint\n * @param {string} blueprint - Blueprint name\n * @returns {Object} Blueprint events\n */\nexport function getBlueprintEvents(blueprint) {\n  return BLUEPRINT_EVENTS[blueprint] || {};\n}\n\n/**\n * Check if event is a progress event\n * @param {string} eventName - Event name\n * @returns {boolean} Is progress event\n */\nexport function isProgressEvent(eventName) {\n  return eventName.includes('progress') || \n         eventName === SOCKET_EVENTS.SERVER_TO_CLIENT.PROGRESS_UPDATE;\n}\n\n/**\n * Check if event is an error event\n * @param {string} eventName - Event name\n * @returns {boolean} Is error event\n */\nexport function isErrorEvent(eventName) {\n  return eventName.includes('error') || \n         eventName.includes('failed') ||\n         eventName === SOCKET_EVENTS.SERVER_TO_CLIENT.TASK_ERROR;\n}\n\n/**\n * Check if event is a completion event\n * @param {string} eventName - Event name\n * @returns {boolean} Is completion event\n */\nexport function isCompletionEvent(eventName) {\n  return eventName.includes('completed') || \n         eventName.includes('finished') ||\n         eventName === SOCKET_EVENTS.SERVER_TO_CLIENT.TASK_COMPLETED;\n}\n\n/**\n * Get Blueprint from task type\n * @param {string} taskType - Task type\n * @returns {string} Blueprint name\n */\nexport function getBlueprintFromTaskType(taskType) {\n  const taskToBlueprintMap = {\n    'file_processing': 'file_processor',\n    'playlist_download': 'playlist_downloader',\n    'web_scraping': 'web_scraper',\n    'academic_search': 'academic_search',\n    'pdf_processing': 'pdf_processor'\n  };\n  \n  return taskToBlueprintMap[taskType] || 'unknown';\n}\n\n/**\n * Get event category for routing\n * @param {string} eventName - Event name\n * @returns {string} Event category\n */\nexport function getEventCategory(eventName) {\n  if (eventName.includes('task') || eventName.includes('progress')) return 'task';\n  if (eventName.includes('file')) return 'file';\n  if (eventName.includes('playlist') || eventName.includes('video')) return 'playlist';\n  if (eventName.includes('pdf')) return 'pdf';\n  if (eventName.includes('scrape') || eventName.includes('url')) return 'scraper';\n  if (eventName.includes('academic') || eventName.includes('paper')) return 'academic';\n  if (eventName.includes('system') || eventName.includes('blueprint')) return 'system';\n  if (eventName.includes('connection') || eventName.includes('connect')) return 'connection';\n  return 'general';\n}\n\n/**\n * Create progress deduplication key\n * @param {string} taskId - Task ID\n * @param {number} progress - Progress value\n * @returns {string} Deduplication key\n */\nexport function createProgressDedupeKey(taskId, progress) {\n  // Round progress to avoid excessive updates\n  const roundedProgress = Math.floor(progress * 10) / 10; // Round to 1 decimal\n  return `${taskId}_${roundedProgress}`;\n}\n\n/**\n * Export individual event groups for convenience\n */\nexport const CONNECTION_EVENTS = SOCKET_EVENTS.CONNECTION;\nexport const CLIENT_EVENTS = SOCKET_EVENTS.CLIENT_TO_SERVER;\nexport const SERVER_EVENTS = SOCKET_EVENTS.SERVER_TO_CLIENT;\n\n// Commonly used events grouped by functionality\nexport const TASK_EVENTS = {\n  STARTED: SOCKET_EVENTS.SERVER_TO_CLIENT.TASK_STARTED,\n  PROGRESS: SOCKET_EVENTS.SERVER_TO_CLIENT.PROGRESS_UPDATE,\n  COMPLETED: SOCKET_EVENTS.SERVER_TO_CLIENT.TASK_COMPLETED,\n  ERROR: SOCKET_EVENTS.SERVER_TO_CLIENT.TASK_ERROR,\n  CANCELLED: SOCKET_EVENTS.SERVER_TO_CLIENT.TASK_CANCELLED\n};\n\n// Cross-platform specific events\nexport const CROSS_PLATFORM_EVENTS = {\n  STATUS: SOCKET_EVENTS.SERVER_TO_CLIENT.CROSS_PLATFORM_STATUS,\n  PATH_CONVERSION: 'path_conversion_status',\n  WINDOWS_CLIENT_READY: 'windows_client_ready',\n  LINUX_SERVER_STATUS: 'linux_server_status'\n};\n\n// Export Blueprint-specific event collections\nexport const FILE_PROCESSOR_EVENTS = BLUEPRINT_EVENTS.file_processor;\nexport const PLAYLIST_EVENTS = BLUEPRINT_EVENTS.playlist_downloader;\nexport const SCRAPER_EVENTS = BLUEPRINT_EVENTS.web_scraper;\nexport const ACADEMIC_EVENTS = BLUEPRINT_EVENTS.academic_search;\nexport const PDF_EVENTS = BLUEPRINT_EVENTS.pdf_processor;","source":"/workspace/modules/static/js/modules/config/socketEvents.js","title":"socketEvents.js","language":"en"}]}}