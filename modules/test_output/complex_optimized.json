{"training_corpus":{"document_count":2,"created":"2025-06-02","documents":[{"content":"# Project Documentation\n\n## Overview\nThis project demonstrates the optimized file processing system that eliminates metadata bloat and focuses on training content.\n\n## Features\n- Clean JSON output with minimal metadata\n- Optimized Markdown format for LLM training\n- Efficient content extraction\n- No unnecessary processing statistics\n\n## Usage\nSimply run the file processor with your input directory and desired output format.\n\n### Example\n```python\nprocess_all_files(\n    input_dir=\"/path/to/files\",\n    output_file=\"output.json\"  # or output.md\n)\n```\n\n## Benefits\n- 60-90% file size reduction\n- Training-focused content structure\n- Clean, readable output\n- No metadata bloat","source":"/workspace/modules/test_input_complex/documentation.md","title":"documentation.md","language":"en"},{"content":"def hello_world():\n    \"\"\"A simple function that prints hello world.\"\"\"\n    print(\"Hello, World!\")\n    return \"success\"\n\nclass DataProcessor:\n    \"\"\"A class for processing data efficiently.\"\"\"\n    \n    def __init__(self, data):\n        self.data = data\n        self.processed = False\n    \n    def process(self):\n        \"\"\"Process the data and mark as processed.\"\"\"\n        # Simulate some processing\n        self.data = [item.upper() for item in self.data]\n        self.processed = True\n        return self.data\n\nif __name__ == \"__main__\":\n    processor = DataProcessor([\"hello\", \"world\", \"from\", \"python\"])\n    result = processor.process()\n    print(f\"Processed data: {result}\")","source":"/workspace/modules/test_input_complex/python_code.py","title":"python_code.py","language":"en"}]}}